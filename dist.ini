name    = Async-Trampoline
version = 0.001002

author  = Lukas Atkinson <amon@cpan.org>
license = Perl_5
copyright_holder    = Lukas Atkinson <amon@cpan.org>
copyright_year      = 2017

[GithubMeta]
repo = p5-Async-Trampoline
user = latk
issues = 1

;;;;;;;;;;;
; Prereqs ;
;;;;;;;;;;;

[Prereqs / RuntimeRequires]
perl = 5.014

[Prereqs / TestRequires]
Test::Exception = 0
Test::More = 0
Test::Output = 0

[Prereqs / TestSuggests]
; extra test deps for author tests
Pod::Coverage::TrustPod = 0
Test::Perl::Critic = 0
Test::Pod = 0
Test::Pod::Coverage = 0

[Prereqs / ConfigureRequires]
ExtUtils::CBuilder = 0.280226

[Prereqs::AuthorDeps]
; add dzil and plugins to develop-requires
; authordep Dist::Zilla::App::Command::cover
exclude = inc::ModuleBuildXS
exclude = inc::ExtractCodeFromPod

;;;;;;;;;;;;;;;;;;;;;;;;;
; Update Version Number ;
;;;;;;;;;;;;;;;;;;;;;;;;;

[Run::BeforeBuild / Update Version Number]
run = %x scripts%pupdate-version.pl %v lib

;;;;;;;;;;;;;;;;;;;
; Gathering Files ;
;;;;;;;;;;;;;;;;;;;

[Git::GatherDir]
exclude_filename = LICENSE
exclude_filename = cpanfile
exclude_filename = Build.PL
exclude_filename = src/ppport.h
exclude_match = ^scripts/

[PruneCruft]

;;;;;;;;;;;;;;;;;;;;;;;;;;
; Generating Extra Files ;
;;;;;;;;;;;;;;;;;;;;;;;;;;

; also [NextRelease]
[CPANFile]
[MetaYAML]
[MetaJSON]
[MetaProvides::Package]
[Manifest]
[License]
[Readme]
[PPPort]
filename = src/ppport.h

;;;;;;;;;;;;;;;;;;;;;;;;;;
; Generating Extra Tests ;
;;;;;;;;;;;;;;;;;;;;;;;;;;

[Test::Perl::Critic]
[PodSyntaxTests]
[PodCoverageTests]
[ExtraTests]
; rewrites xt/ tests into to t/

[=inc::ExtractCodeFromPod]
; Extract tests from POD
;
; authordep Pod::Parser
file = ./lib/Async/Trampoline.pm
file = ./lib/Async/Trampoline/Example/Interpreter.pod

;;;;;;;;;;;;;;;;
; Build System ;
;;;;;;;;;;;;;;;;

[=inc::ModuleBuildXS]
mb_class = MyModuleBuild

;;;;;;;;;;;;;;;;;;;;;;;;
; Copy Generated Files ;
;;;;;;;;;;;;;;;;;;;;;;;;

[CopyFilesFromBuild]
copy = LICENSE
copy = cpanfile
copy = Build.PL
copy = src/ppport.h

[ReadmeAnyFromPod]
type = markdown
filename = README.md
location = root
phase = build

;;;;;;;;;;;;;;;;;;
; Before Release ;
;;;;;;;;;;;;;;;;;;

[Git::CheckFor::CorrectBranch]
[Git::Check]
[CheckChangesHasContent]
[CheckVersionIncrement]
[TestRelease]
[ConfirmRelease]

;;;;;;;;;;;
; Release ;
;;:;;;;;;;;

[UploadToCPAN]

;;;;;;;;;;;;;;;;;
; After Release ;
;;;;;;;;;;;;;;;;;

[NextRelease]
; munges Changes and copies it back after release
time_zone = UTC

[Git::Commit]
commit_msg = release-%v
[Git::Tag]
tag_format = release-%v
tag_message = release-%v
[Git::Push]
